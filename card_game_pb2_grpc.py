# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import card_game_pb2 as card__game__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in card_game_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CardGameServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/CardGameService/Login',
                request_serializer=card__game__pb2.LoginRequest.SerializeToString,
                response_deserializer=card__game__pb2.Response.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/CardGameService/Logout',
                request_serializer=card__game__pb2.LogoutRequest.SerializeToString,
                response_deserializer=card__game__pb2.Response.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/CardGameService/DeleteAccount',
                request_serializer=card__game__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=card__game__pb2.Response.FromString,
                _registered_method=True)
        self.StartMatch = channel.unary_unary(
                '/CardGameService/StartMatch',
                request_serializer=card__game__pb2.MatchRequest.SerializeToString,
                response_deserializer=card__game__pb2.Response.FromString,
                _registered_method=True)
        self.CancelMatch = channel.unary_unary(
                '/CardGameService/CancelMatch',
                request_serializer=card__game__pb2.MatchCancelRequest.SerializeToString,
                response_deserializer=card__game__pb2.Response.FromString,
                _registered_method=True)
        self.AcceptMatch = channel.unary_unary(
                '/CardGameService/AcceptMatch',
                request_serializer=card__game__pb2.AcceptMatchRequest.SerializeToString,
                response_deserializer=card__game__pb2.Response.FromString,
                _registered_method=True)
        self.PlayCard = channel.unary_unary(
                '/CardGameService/PlayCard',
                request_serializer=card__game__pb2.PlayCardRequest.SerializeToString,
                response_deserializer=card__game__pb2.Response.FromString,
                _registered_method=True)
        self.PassTurn = channel.unary_unary(
                '/CardGameService/PassTurn',
                request_serializer=card__game__pb2.GameActionRequest.SerializeToString,
                response_deserializer=card__game__pb2.Response.FromString,
                _registered_method=True)
        self.QuitGame = channel.unary_unary(
                '/CardGameService/QuitGame',
                request_serializer=card__game__pb2.GameActionRequest.SerializeToString,
                response_deserializer=card__game__pb2.Response.FromString,
                _registered_method=True)
        self.GetGameState = channel.unary_unary(
                '/CardGameService/GetGameState',
                request_serializer=card__game__pb2.GameStateRequest.SerializeToString,
                response_deserializer=card__game__pb2.GameStateResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/CardGameService/Heartbeat',
                request_serializer=card__game__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=card__game__pb2.Response.FromString,
                _registered_method=True)
        self.SyncData = channel.unary_unary(
                '/CardGameService/SyncData',
                request_serializer=card__game__pb2.SyncDataRequest.SerializeToString,
                response_deserializer=card__game__pb2.SyncDataResponse.FromString,
                _registered_method=True)
        self.FollowerSync = channel.unary_unary(
                '/CardGameService/FollowerSync',
                request_serializer=card__game__pb2.FollowerSyncDataRequest.SerializeToString,
                response_deserializer=card__game__pb2.Response.FromString,
                _registered_method=True)
        self.WhoIsLeader = channel.unary_unary(
                '/CardGameService/WhoIsLeader',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=card__game__pb2.LeaderInfoResponse.FromString,
                _registered_method=True)


class CardGameServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartMatch(self, request, context):
        """Matchmaking
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelMatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptMatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayCard(self, request, context):
        """Game Play
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PassTurn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuitGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGameState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Sync & Replication
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FollowerSync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WhoIsLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CardGameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=card__game__pb2.LoginRequest.FromString,
                    response_serializer=card__game__pb2.Response.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=card__game__pb2.LogoutRequest.FromString,
                    response_serializer=card__game__pb2.Response.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=card__game__pb2.DeleteAccountRequest.FromString,
                    response_serializer=card__game__pb2.Response.SerializeToString,
            ),
            'StartMatch': grpc.unary_unary_rpc_method_handler(
                    servicer.StartMatch,
                    request_deserializer=card__game__pb2.MatchRequest.FromString,
                    response_serializer=card__game__pb2.Response.SerializeToString,
            ),
            'CancelMatch': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelMatch,
                    request_deserializer=card__game__pb2.MatchCancelRequest.FromString,
                    response_serializer=card__game__pb2.Response.SerializeToString,
            ),
            'AcceptMatch': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptMatch,
                    request_deserializer=card__game__pb2.AcceptMatchRequest.FromString,
                    response_serializer=card__game__pb2.Response.SerializeToString,
            ),
            'PlayCard': grpc.unary_unary_rpc_method_handler(
                    servicer.PlayCard,
                    request_deserializer=card__game__pb2.PlayCardRequest.FromString,
                    response_serializer=card__game__pb2.Response.SerializeToString,
            ),
            'PassTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.PassTurn,
                    request_deserializer=card__game__pb2.GameActionRequest.FromString,
                    response_serializer=card__game__pb2.Response.SerializeToString,
            ),
            'QuitGame': grpc.unary_unary_rpc_method_handler(
                    servicer.QuitGame,
                    request_deserializer=card__game__pb2.GameActionRequest.FromString,
                    response_serializer=card__game__pb2.Response.SerializeToString,
            ),
            'GetGameState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGameState,
                    request_deserializer=card__game__pb2.GameStateRequest.FromString,
                    response_serializer=card__game__pb2.GameStateResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=card__game__pb2.HeartbeatRequest.FromString,
                    response_serializer=card__game__pb2.Response.SerializeToString,
            ),
            'SyncData': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncData,
                    request_deserializer=card__game__pb2.SyncDataRequest.FromString,
                    response_serializer=card__game__pb2.SyncDataResponse.SerializeToString,
            ),
            'FollowerSync': grpc.unary_unary_rpc_method_handler(
                    servicer.FollowerSync,
                    request_deserializer=card__game__pb2.FollowerSyncDataRequest.FromString,
                    response_serializer=card__game__pb2.Response.SerializeToString,
            ),
            'WhoIsLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.WhoIsLeader,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=card__game__pb2.LeaderInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CardGameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('CardGameService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CardGameService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/Login',
            card__game__pb2.LoginRequest.SerializeToString,
            card__game__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/Logout',
            card__game__pb2.LogoutRequest.SerializeToString,
            card__game__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/DeleteAccount',
            card__game__pb2.DeleteAccountRequest.SerializeToString,
            card__game__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartMatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/StartMatch',
            card__game__pb2.MatchRequest.SerializeToString,
            card__game__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelMatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/CancelMatch',
            card__game__pb2.MatchCancelRequest.SerializeToString,
            card__game__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AcceptMatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/AcceptMatch',
            card__game__pb2.AcceptMatchRequest.SerializeToString,
            card__game__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlayCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/PlayCard',
            card__game__pb2.PlayCardRequest.SerializeToString,
            card__game__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PassTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/PassTurn',
            card__game__pb2.GameActionRequest.SerializeToString,
            card__game__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QuitGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/QuitGame',
            card__game__pb2.GameActionRequest.SerializeToString,
            card__game__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGameState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/GetGameState',
            card__game__pb2.GameStateRequest.SerializeToString,
            card__game__pb2.GameStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/Heartbeat',
            card__game__pb2.HeartbeatRequest.SerializeToString,
            card__game__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SyncData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/SyncData',
            card__game__pb2.SyncDataRequest.SerializeToString,
            card__game__pb2.SyncDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FollowerSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/FollowerSync',
            card__game__pb2.FollowerSyncDataRequest.SerializeToString,
            card__game__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WhoIsLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CardGameService/WhoIsLeader',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            card__game__pb2.LeaderInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
